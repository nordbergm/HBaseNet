/**
 * Autogenerated by Thrift Compiler (0.7.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Thrift.Protocol;

namespace Thrift.HBase
{
    public class Hbase
    {
        #region Nested type: Client

        public class Client : Iface
        {
            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                this.iprot_ = iprot;
                this.oprot_ = oprot;
            }

            public TProtocol InputProtocol
            {
                get { return this.iprot_; }
            }

            public TProtocol OutputProtocol
            {
                get { return this.oprot_; }
            }

            #region Iface Members

            public void enableTable(byte[] tableName)
            {
                this.send_enableTable(tableName);
                this.recv_enableTable();
            }

            public void disableTable(byte[] tableName)
            {
                this.send_disableTable(tableName);
                this.recv_disableTable();
            }

            public bool isTableEnabled(byte[] tableName)
            {
                this.send_isTableEnabled(tableName);
                return this.recv_isTableEnabled();
            }

            public void compact(byte[] tableNameOrRegionName)
            {
                this.send_compact(tableNameOrRegionName);
                this.recv_compact();
            }

            public void majorCompact(byte[] tableNameOrRegionName)
            {
                this.send_majorCompact(tableNameOrRegionName);
                this.recv_majorCompact();
            }

            public List<byte[]> getTableNames()
            {
                this.send_getTableNames();
                return this.recv_getTableNames();
            }

            public Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName)
            {
                this.send_getColumnDescriptors(tableName);
                return this.recv_getColumnDescriptors();
            }

            public List<TRegionInfo> getTableRegions(byte[] tableName)
            {
                this.send_getTableRegions(tableName);
                return this.recv_getTableRegions();
            }

            public void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
            {
                this.send_createTable(tableName, columnFamilies);
                this.recv_createTable();
            }

            public void deleteTable(byte[] tableName)
            {
                this.send_deleteTable(tableName);
                this.recv_deleteTable();
            }

            public List<TCell> get(byte[] tableName, byte[] row, byte[] column)
            {
                this.send_get(tableName, row, column);
                return this.recv_get();
            }

            public List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
            {
                this.send_getVer(tableName, row, column, numVersions);
                return this.recv_getVer();
            }

            public List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
            {
                this.send_getVerTs(tableName, row, column, timestamp, numVersions);
                return this.recv_getVerTs();
            }

            public List<TRowResult> getRow(byte[] tableName, byte[] row)
            {
                this.send_getRow(tableName, row);
                return this.recv_getRow();
            }

            public List<TRowResult> getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns)
            {
                this.send_getRowWithColumns(tableName, row, columns);
                return this.recv_getRowWithColumns();
            }

            public List<TRowResult> getRowTs(byte[] tableName, byte[] row, long timestamp)
            {
                this.send_getRowTs(tableName, row, timestamp);
                return this.recv_getRowTs();
            }

            public List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
            {
                this.send_getRowWithColumnsTs(tableName, row, columns, timestamp);
                return this.recv_getRowWithColumnsTs();
            }

            public List<TRowResult> getRows(byte[] tableName, List<byte[]> rows)
            {
                this.send_getRows(tableName, rows);
                return this.recv_getRows();
            }

            public List<TRowResult> getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns)
            {
                this.send_getRowsWithColumns(tableName, rows, columns);
                return this.recv_getRowsWithColumns();
            }

            public List<TRowResult> getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp)
            {
                this.send_getRowsTs(tableName, rows, timestamp);
                return this.recv_getRowsTs();
            }

            public List<TRowResult> getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns,
                                                         long timestamp)
            {
                this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp);
                return this.recv_getRowsWithColumnsTs();
            }

            public void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
            {
                this.send_mutateRow(tableName, row, mutations);
                this.recv_mutateRow();
            }

            public void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
            {
                this.send_mutateRowTs(tableName, row, mutations, timestamp);
                this.recv_mutateRowTs();
            }

            public void mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
            {
                this.send_mutateRows(tableName, rowBatches);
                this.recv_mutateRows();
            }

            public void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
            {
                this.send_mutateRowsTs(tableName, rowBatches, timestamp);
                this.recv_mutateRowsTs();
            }

            public long atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value)
            {
                this.send_atomicIncrement(tableName, row, column, value);
                return this.recv_atomicIncrement();
            }

            public void deleteAll(byte[] tableName, byte[] row, byte[] column)
            {
                this.send_deleteAll(tableName, row, column);
                this.recv_deleteAll();
            }

            public void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
            {
                this.send_deleteAllTs(tableName, row, column, timestamp);
                this.recv_deleteAllTs();
            }

            public void deleteAllRow(byte[] tableName, byte[] row)
            {
                this.send_deleteAllRow(tableName, row);
                this.recv_deleteAllRow();
            }

            public void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
            {
                this.send_deleteAllRowTs(tableName, row, timestamp);
                this.recv_deleteAllRowTs();
            }

            public int scannerOpenWithScan(byte[] tableName, TScan scan)
            {
                this.send_scannerOpenWithScan(tableName, scan);
                return this.recv_scannerOpenWithScan();
            }

            public int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
            {
                this.send_scannerOpen(tableName, startRow, columns);
                return this.recv_scannerOpen();
            }

            public int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
            {
                this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns);
                return this.recv_scannerOpenWithStop();
            }

            public int scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
            {
                this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns);
                return this.recv_scannerOpenWithPrefix();
            }

            public int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
            {
                this.send_scannerOpenTs(tableName, startRow, columns, timestamp);
                return this.recv_scannerOpenTs();
            }

            public int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns,
                                             long timestamp)
            {
                this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp);
                return this.recv_scannerOpenWithStopTs();
            }

            public List<TRowResult> scannerGet(int id)
            {
                this.send_scannerGet(id);
                return this.recv_scannerGet();
            }

            public List<TRowResult> scannerGetList(int id, int nbRows)
            {
                this.send_scannerGetList(id, nbRows);
                return this.recv_scannerGetList();
            }

            public void scannerClose(int id)
            {
                this.send_scannerClose(id);
                this.recv_scannerClose();
            }

            #endregion

            public void send_enableTable(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("enableTable", TMessageType.Call, this.seqid_));
                var args = new enableTable_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_enableTable()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new enableTable_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_disableTable(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("disableTable", TMessageType.Call, this.seqid_));
                var args = new disableTable_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_disableTable()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new disableTable_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_isTableEnabled(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Call, this.seqid_));
                var args = new isTableEnabled_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public bool recv_isTableEnabled()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new isTableEnabled_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "isTableEnabled failed: unknown result");
            }

            public void send_compact(byte[] tableNameOrRegionName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("compact", TMessageType.Call, this.seqid_));
                var args = new compact_args();
                args.TableNameOrRegionName = tableNameOrRegionName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_compact()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new compact_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_majorCompact(byte[] tableNameOrRegionName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("majorCompact", TMessageType.Call, this.seqid_));
                var args = new majorCompact_args();
                args.TableNameOrRegionName = tableNameOrRegionName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_majorCompact()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new majorCompact_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_getTableNames()
            {
                this.oprot_.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Call, this.seqid_));
                var args = new getTableNames_args();
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<byte[]> recv_getTableNames()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getTableNames_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getTableNames failed: unknown result");
            }

            public void send_getColumnDescriptors(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Call, this.seqid_));
                var args = new getColumnDescriptors_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public Dictionary<byte[], ColumnDescriptor> recv_getColumnDescriptors()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getColumnDescriptors_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getColumnDescriptors failed: unknown result");
            }

            public void send_getTableRegions(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Call, this.seqid_));
                var args = new getTableRegions_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRegionInfo> recv_getTableRegions()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getTableRegions_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getTableRegions failed: unknown result");
            }

            public void send_createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
            {
                this.oprot_.WriteMessageBegin(new TMessage("createTable", TMessageType.Call, this.seqid_));
                var args = new createTable_args();
                args.TableName = tableName;
                args.ColumnFamilies = columnFamilies;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_createTable()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new createTable_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                if (result.__isset.exist)
                {
                    throw result.Exist;
                }
                return;
            }

            public void send_deleteTable(byte[] tableName)
            {
                this.oprot_.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Call, this.seqid_));
                var args = new deleteTable_args();
                args.TableName = tableName;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_deleteTable()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new deleteTable_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_get(byte[] tableName, byte[] row, byte[] column)
            {
                this.oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, this.seqid_));
                var args = new get_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TCell> recv_get()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new get_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "get failed: unknown result");
            }

            public void send_getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getVer", TMessageType.Call, this.seqid_));
                var args = new getVer_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.NumVersions = numVersions;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TCell> recv_getVer()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getVer_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getVer failed: unknown result");
            }

            public void send_getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Call, this.seqid_));
                var args = new getVerTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.Timestamp = timestamp;
                args.NumVersions = numVersions;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TCell> recv_getVerTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getVerTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getVerTs failed: unknown result");
            }

            public void send_getRow(byte[] tableName, byte[] row)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRow", TMessageType.Call, this.seqid_));
                var args = new getRow_args();
                args.TableName = tableName;
                args.Row = row;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRow()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRow_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRow failed: unknown result");
            }

            public void send_getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowWithColumns", TMessageType.Call, this.seqid_));
                var args = new getRowWithColumns_args();
                args.TableName = tableName;
                args.Row = row;
                args.Columns = columns;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowWithColumns()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowWithColumns_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowWithColumns failed: unknown result");
            }

            public void send_getRowTs(byte[] tableName, byte[] row, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Call, this.seqid_));
                var args = new getRowTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowTs failed: unknown result");
            }

            public void send_getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowWithColumnsTs", TMessageType.Call, this.seqid_));
                var args = new getRowWithColumnsTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Columns = columns;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowWithColumnsTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowWithColumnsTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowWithColumnsTs failed: unknown result");
            }

            public void send_getRows(byte[] tableName, List<byte[]> rows)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRows", TMessageType.Call, this.seqid_));
                var args = new getRows_args();
                args.TableName = tableName;
                args.Rows = rows;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRows()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRows_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRows failed: unknown result");
            }

            public void send_getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowsWithColumns", TMessageType.Call, this.seqid_));
                var args = new getRowsWithColumns_args();
                args.TableName = tableName;
                args.Rows = rows;
                args.Columns = columns;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowsWithColumns()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowsWithColumns_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowsWithColumns failed: unknown result");
            }

            public void send_getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowsTs", TMessageType.Call, this.seqid_));
                var args = new getRowsTs_args();
                args.TableName = tableName;
                args.Rows = rows;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowsTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowsTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowsTs failed: unknown result");
            }

            public void send_getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("getRowsWithColumnsTs", TMessageType.Call, this.seqid_));
                var args = new getRowsWithColumnsTs_args();
                args.TableName = tableName;
                args.Rows = rows;
                args.Columns = columns;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_getRowsWithColumnsTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new getRowsWithColumnsTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "getRowsWithColumnsTs failed: unknown result");
            }

            public void send_mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
            {
                this.oprot_.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Call, this.seqid_));
                var args = new mutateRow_args();
                args.TableName = tableName;
                args.Row = row;
                args.Mutations = mutations;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_mutateRow()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new mutateRow_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }

            public void send_mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Call, this.seqid_));
                var args = new mutateRowTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Mutations = mutations;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_mutateRowTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new mutateRowTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }

            public void send_mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
            {
                this.oprot_.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Call, this.seqid_));
                var args = new mutateRows_args();
                args.TableName = tableName;
                args.RowBatches = rowBatches;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_mutateRows()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new mutateRows_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }

            public void send_mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Call, this.seqid_));
                var args = new mutateRowsTs_args();
                args.TableName = tableName;
                args.RowBatches = rowBatches;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_mutateRowsTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new mutateRowsTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }

            public void send_atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value)
            {
                this.oprot_.WriteMessageBegin(new TMessage("atomicIncrement", TMessageType.Call, this.seqid_));
                var args = new atomicIncrement_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.Value = value;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public long recv_atomicIncrement()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new atomicIncrement_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "atomicIncrement failed: unknown result");
            }

            public void send_deleteAll(byte[] tableName, byte[] row, byte[] column)
            {
                this.oprot_.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Call, this.seqid_));
                var args = new deleteAll_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_deleteAll()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new deleteAll_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Call, this.seqid_));
                var args = new deleteAllTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Column = column;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_deleteAllTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new deleteAllTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_deleteAllRow(byte[] tableName, byte[] row)
            {
                this.oprot_.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Call, this.seqid_));
                var args = new deleteAllRow_args();
                args.TableName = tableName;
                args.Row = row;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_deleteAllRow()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new deleteAllRow_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Call, this.seqid_));
                var args = new deleteAllRowTs_args();
                args.TableName = tableName;
                args.Row = row;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_deleteAllRowTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new deleteAllRowTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                return;
            }

            public void send_scannerOpenWithScan(byte[] tableName, TScan scan)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpenWithScan", TMessageType.Call, this.seqid_));
                var args = new scannerOpenWithScan_args();
                args.TableName = tableName;
                args.Scan = scan;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpenWithScan()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpenWithScan_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpenWithScan failed: unknown result");
            }

            public void send_scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Call, this.seqid_));
                var args = new scannerOpen_args();
                args.TableName = tableName;
                args.StartRow = startRow;
                args.Columns = columns;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpen()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpen_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpen failed: unknown result");
            }

            public void send_scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Call, this.seqid_));
                var args = new scannerOpenWithStop_args();
                args.TableName = tableName;
                args.StartRow = startRow;
                args.StopRow = stopRow;
                args.Columns = columns;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpenWithStop()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpenWithStop_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpenWithStop failed: unknown result");
            }

            public void send_scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpenWithPrefix", TMessageType.Call, this.seqid_));
                var args = new scannerOpenWithPrefix_args();
                args.TableName = tableName;
                args.StartAndPrefix = startAndPrefix;
                args.Columns = columns;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpenWithPrefix()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpenWithPrefix_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpenWithPrefix failed: unknown result");
            }

            public void send_scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Call, this.seqid_));
                var args = new scannerOpenTs_args();
                args.TableName = tableName;
                args.StartRow = startRow;
                args.Columns = columns;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpenTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpenTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpenTs failed: unknown result");
            }

            public void send_scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns,
                                                   long timestamp)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Call, this.seqid_));
                var args = new scannerOpenWithStopTs_args();
                args.TableName = tableName;
                args.StartRow = startRow;
                args.StopRow = stopRow;
                args.Columns = columns;
                args.Timestamp = timestamp;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public int recv_scannerOpenWithStopTs()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerOpenWithStopTs_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerOpenWithStopTs failed: unknown result");
            }

            public void send_scannerGet(int id)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Call, this.seqid_));
                var args = new scannerGet_args();
                args.Id = id;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_scannerGet()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerGet_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerGet failed: unknown result");
            }

            public void send_scannerGetList(int id, int nbRows)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerGetList", TMessageType.Call, this.seqid_));
                var args = new scannerGetList_args();
                args.Id = id;
                args.NbRows = nbRows;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public List<TRowResult> recv_scannerGetList()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerGetList_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                                                "scannerGetList failed: unknown result");
            }

            public void send_scannerClose(int id)
            {
                this.oprot_.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Call, this.seqid_));
                var args = new scannerClose_args();
                args.Id = id;
                args.Write(this.oprot_);
                this.oprot_.WriteMessageEnd();
                this.oprot_.Transport.Flush();
            }

            public void recv_scannerClose()
            {
                TMessage msg = this.iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(this.iprot_);
                    this.iprot_.ReadMessageEnd();
                    throw x;
                }
                var result = new scannerClose_result();
                result.Read(this.iprot_);
                this.iprot_.ReadMessageEnd();
                if (result.__isset.io)
                {
                    throw result.Io;
                }
                if (result.__isset.ia)
                {
                    throw result.Ia;
                }
                return;
            }
        }

        #endregion

        #region Nested type: Iface

        public interface Iface
        {
            void enableTable(byte[] tableName);
            void disableTable(byte[] tableName);
            bool isTableEnabled(byte[] tableName);
            void compact(byte[] tableNameOrRegionName);
            void majorCompact(byte[] tableNameOrRegionName);
            List<byte[]> getTableNames();
            Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName);
            List<TRegionInfo> getTableRegions(byte[] tableName);
            void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies);
            void deleteTable(byte[] tableName);
            List<TCell> get(byte[] tableName, byte[] row, byte[] column);
            List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions);
            List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions);
            List<TRowResult> getRow(byte[] tableName, byte[] row);
            List<TRowResult> getRowWithColumns(byte[] tableName, byte[] row, List<byte[]> columns);
            List<TRowResult> getRowTs(byte[] tableName, byte[] row, long timestamp);
            List<TRowResult> getRowWithColumnsTs(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp);
            List<TRowResult> getRows(byte[] tableName, List<byte[]> rows);
            List<TRowResult> getRowsWithColumns(byte[] tableName, List<byte[]> rows, List<byte[]> columns);
            List<TRowResult> getRowsTs(byte[] tableName, List<byte[]> rows, long timestamp);
            List<TRowResult> getRowsWithColumnsTs(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp);
            void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations);
            void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp);
            void mutateRows(byte[] tableName, List<BatchMutation> rowBatches);
            void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp);
            long atomicIncrement(byte[] tableName, byte[] row, byte[] column, long value);
            void deleteAll(byte[] tableName, byte[] row, byte[] column);
            void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp);
            void deleteAllRow(byte[] tableName, byte[] row);
            void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp);
            int scannerOpenWithScan(byte[] tableName, TScan scan);
            int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns);
            int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns);
            int scannerOpenWithPrefix(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns);
            int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp);

            int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns,
                                      long timestamp);

            List<TRowResult> scannerGet(int id);
            List<TRowResult> scannerGetList(int id, int nbRows);
            void scannerClose(int id);
        }

        #endregion

        #region Nested type: Processor

        public class Processor : TProcessor
        {
            private readonly Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public Processor(Iface iface)
            {
                this.iface_ = iface;
                this.processMap_["enableTable"] = this.enableTable_Process;
                this.processMap_["disableTable"] = this.disableTable_Process;
                this.processMap_["isTableEnabled"] = this.isTableEnabled_Process;
                this.processMap_["compact"] = this.compact_Process;
                this.processMap_["majorCompact"] = this.majorCompact_Process;
                this.processMap_["getTableNames"] = this.getTableNames_Process;
                this.processMap_["getColumnDescriptors"] = this.getColumnDescriptors_Process;
                this.processMap_["getTableRegions"] = this.getTableRegions_Process;
                this.processMap_["createTable"] = this.createTable_Process;
                this.processMap_["deleteTable"] = this.deleteTable_Process;
                this.processMap_["get"] = this.get_Process;
                this.processMap_["getVer"] = this.getVer_Process;
                this.processMap_["getVerTs"] = this.getVerTs_Process;
                this.processMap_["getRow"] = this.getRow_Process;
                this.processMap_["getRowWithColumns"] = this.getRowWithColumns_Process;
                this.processMap_["getRowTs"] = this.getRowTs_Process;
                this.processMap_["getRowWithColumnsTs"] = this.getRowWithColumnsTs_Process;
                this.processMap_["getRows"] = this.getRows_Process;
                this.processMap_["getRowsWithColumns"] = this.getRowsWithColumns_Process;
                this.processMap_["getRowsTs"] = this.getRowsTs_Process;
                this.processMap_["getRowsWithColumnsTs"] = this.getRowsWithColumnsTs_Process;
                this.processMap_["mutateRow"] = this.mutateRow_Process;
                this.processMap_["mutateRowTs"] = this.mutateRowTs_Process;
                this.processMap_["mutateRows"] = this.mutateRows_Process;
                this.processMap_["mutateRowsTs"] = this.mutateRowsTs_Process;
                this.processMap_["atomicIncrement"] = this.atomicIncrement_Process;
                this.processMap_["deleteAll"] = this.deleteAll_Process;
                this.processMap_["deleteAllTs"] = this.deleteAllTs_Process;
                this.processMap_["deleteAllRow"] = this.deleteAllRow_Process;
                this.processMap_["deleteAllRowTs"] = this.deleteAllRowTs_Process;
                this.processMap_["scannerOpenWithScan"] = this.scannerOpenWithScan_Process;
                this.processMap_["scannerOpen"] = this.scannerOpen_Process;
                this.processMap_["scannerOpenWithStop"] = this.scannerOpenWithStop_Process;
                this.processMap_["scannerOpenWithPrefix"] = this.scannerOpenWithPrefix_Process;
                this.processMap_["scannerOpenTs"] = this.scannerOpenTs_Process;
                this.processMap_["scannerOpenWithStopTs"] = this.scannerOpenWithStopTs_Process;
                this.processMap_["scannerGet"] = this.scannerGet_Process;
                this.processMap_["scannerGetList"] = this.scannerGetList_Process;
                this.processMap_["scannerClose"] = this.scannerClose_Process;
            }

            #region TProcessor Members

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    this.processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        var x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod,
                                                          "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            #endregion

            public void enableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new enableTable_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new enableTable_result();
                try
                {
                    this.iface_.enableTable(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("enableTable", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void disableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new disableTable_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new disableTable_result();
                try
                {
                    this.iface_.disableTable(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("disableTable", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void isTableEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new isTableEnabled_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new isTableEnabled_result();
                try
                {
                    result.Success = this.iface_.isTableEnabled(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void compact_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new compact_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new compact_result();
                try
                {
                    this.iface_.compact(args.TableNameOrRegionName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("compact", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void majorCompact_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new majorCompact_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new majorCompact_result();
                try
                {
                    this.iface_.majorCompact(args.TableNameOrRegionName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("majorCompact", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getTableNames_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getTableNames_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getTableNames_result();
                try
                {
                    result.Success = this.iface_.getTableNames();
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getColumnDescriptors_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getColumnDescriptors_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getColumnDescriptors_result();
                try
                {
                    result.Success = this.iface_.getColumnDescriptors(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getTableRegions_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getTableRegions_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getTableRegions_result();
                try
                {
                    result.Success = this.iface_.getTableRegions(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void createTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new createTable_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new createTable_result();
                try
                {
                    this.iface_.createTable(args.TableName, args.ColumnFamilies);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                catch (AlreadyExists exist)
                {
                    result.Exist = exist;
                }
                oprot.WriteMessageBegin(new TMessage("createTable", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new deleteTable_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new deleteTable_result();
                try
                {
                    this.iface_.deleteTable(args.TableName);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new get_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new get_result();
                try
                {
                    result.Success = this.iface_.get(args.TableName, args.Row, args.Column);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getVer_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getVer_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getVer_result();
                try
                {
                    result.Success = this.iface_.getVer(args.TableName, args.Row, args.Column, args.NumVersions);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getVer", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getVerTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getVerTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getVerTs_result();
                try
                {
                    result.Success = this.iface_.getVerTs(args.TableName, args.Row, args.Column, args.Timestamp,
                                                          args.NumVersions);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRow_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRow_result();
                try
                {
                    result.Success = this.iface_.getRow(args.TableName, args.Row);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRow", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowWithColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowWithColumns_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowWithColumns_result();
                try
                {
                    result.Success = this.iface_.getRowWithColumns(args.TableName, args.Row, args.Columns);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowWithColumns", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowTs_result();
                try
                {
                    result.Success = this.iface_.getRowTs(args.TableName, args.Row, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowWithColumnsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowWithColumnsTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowWithColumnsTs_result();
                try
                {
                    result.Success = this.iface_.getRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowWithColumnsTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRows_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRows_result();
                try
                {
                    result.Success = this.iface_.getRows(args.TableName, args.Rows);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRows", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowsWithColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowsWithColumns_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowsWithColumns_result();
                try
                {
                    result.Success = this.iface_.getRowsWithColumns(args.TableName, args.Rows, args.Columns);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowsWithColumns", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowsTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowsTs_result();
                try
                {
                    result.Success = this.iface_.getRowsTs(args.TableName, args.Rows, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowsTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getRowsWithColumnsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new getRowsWithColumnsTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new getRowsWithColumnsTs_result();
                try
                {
                    result.Success = this.iface_.getRowsWithColumnsTs(args.TableName, args.Rows, args.Columns,
                                                                      args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("getRowsWithColumnsTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void mutateRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new mutateRow_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new mutateRow_result();
                try
                {
                    this.iface_.mutateRow(args.TableName, args.Row, args.Mutations);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void mutateRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new mutateRowTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new mutateRowTs_result();
                try
                {
                    this.iface_.mutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void mutateRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new mutateRows_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new mutateRows_result();
                try
                {
                    this.iface_.mutateRows(args.TableName, args.RowBatches);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void mutateRowsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new mutateRowsTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new mutateRowsTs_result();
                try
                {
                    this.iface_.mutateRowsTs(args.TableName, args.RowBatches, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void atomicIncrement_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new atomicIncrement_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new atomicIncrement_result();
                try
                {
                    result.Success = this.iface_.atomicIncrement(args.TableName, args.Row, args.Column, args.Value);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("atomicIncrement", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new deleteAll_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new deleteAll_result();
                try
                {
                    this.iface_.deleteAll(args.TableName, args.Row, args.Column);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteAllTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new deleteAllTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new deleteAllTs_result();
                try
                {
                    this.iface_.deleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteAllRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new deleteAllRow_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new deleteAllRow_result();
                try
                {
                    this.iface_.deleteAllRow(args.TableName, args.Row);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteAllRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new deleteAllRowTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new deleteAllRowTs_result();
                try
                {
                    this.iface_.deleteAllRowTs(args.TableName, args.Row, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpenWithScan_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpenWithScan_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpenWithScan_result();
                try
                {
                    result.Success = this.iface_.scannerOpenWithScan(args.TableName, args.Scan);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpenWithScan", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpen_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpen_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpen_result();
                try
                {
                    result.Success = this.iface_.scannerOpen(args.TableName, args.StartRow, args.Columns);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpenWithStop_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpenWithStop_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpenWithStop_result();
                try
                {
                    result.Success = this.iface_.scannerOpenWithStop(args.TableName, args.StartRow, args.StopRow,
                                                                     args.Columns);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpenWithPrefix_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpenWithPrefix_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpenWithPrefix_result();
                try
                {
                    result.Success = this.iface_.scannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpenWithPrefix", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpenTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpenTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpenTs_result();
                try
                {
                    result.Success = this.iface_.scannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerOpenWithStopTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerOpenWithStopTs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerOpenWithStopTs_result();
                try
                {
                    result.Success = this.iface_.scannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow,
                                                                       args.Columns, args.Timestamp);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                oprot.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerGet_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerGet_result();
                try
                {
                    result.Success = this.iface_.scannerGet(args.Id);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerGetList_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerGetList_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerGetList_result();
                try
                {
                    result.Success = this.iface_.scannerGetList(args.Id, args.NbRows);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("scannerGetList", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void scannerClose_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                var args = new scannerClose_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                var result = new scannerClose_result();
                try
                {
                    this.iface_.scannerClose(args.Id);
                }
                catch (IOError io)
                {
                    result.Io = io;
                }
                catch (IllegalArgument ia)
                {
                    result.Ia = ia;
                }
                oprot.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            #region Nested type: ProcessFunction

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

            #endregion
        }

        #endregion

        #region Nested type: atomicIncrement_args

        [Serializable]
        public class atomicIncrement_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private byte[] _row;
            private byte[] _tableName;
            private long _value;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            public long Value
            {
                get { return this._value; }
                set
                {
                    this.__isset.value = true;
                    this._value = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Value = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("atomicIncrement_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.value)
                {
                    field.Name = "value";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Value);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("atomicIncrement_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(",Value: ");
                sb.Append(this.Value);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool row;
                public bool tableName;
                public bool value;
            }

            #endregion
        }

        #endregion

        #region Nested type: atomicIncrement_result

        [Serializable]
        public class atomicIncrement_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;
            private long _success;

            public long Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I64)
                            {
                                this.Success = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("atomicIncrement_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I64;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("atomicIncrement_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: compact_args

        [Serializable]
        public class compact_args : TBase
        {
            public Isset __isset;
            private byte[] _tableNameOrRegionName;

            public byte[] TableNameOrRegionName
            {
                get { return this._tableNameOrRegionName; }
                set
                {
                    this.__isset.tableNameOrRegionName = true;
                    this._tableNameOrRegionName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableNameOrRegionName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("compact_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableNameOrRegionName != null && this.__isset.tableNameOrRegionName)
                {
                    field.Name = "tableNameOrRegionName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableNameOrRegionName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("compact_args(");
                sb.Append("TableNameOrRegionName: ");
                sb.Append(this.TableNameOrRegionName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableNameOrRegionName;
            }

            #endregion
        }

        #endregion

        #region Nested type: compact_result

        [Serializable]
        public class compact_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("compact_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("compact_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: createTable_args

        [Serializable]
        public class createTable_args : TBase
        {
            public Isset __isset;
            private List<ColumnDescriptor> _columnFamilies;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<ColumnDescriptor> ColumnFamilies
            {
                get { return this._columnFamilies; }
                set
                {
                    this.__isset.columnFamilies = true;
                    this._columnFamilies = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.ColumnFamilies = new List<ColumnDescriptor>();
                                    TList _list26 = iprot.ReadListBegin();
                                    for (int _i27 = 0; _i27 < _list26.Count; ++_i27)
                                    {
                                        var _elem28 = new ColumnDescriptor();
                                        _elem28 = new ColumnDescriptor();
                                        _elem28.Read(iprot);
                                        this.ColumnFamilies.Add(_elem28);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("createTable_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.ColumnFamilies != null && this.__isset.columnFamilies)
                {
                    field.Name = "columnFamilies";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, this.ColumnFamilies.Count));
                        foreach (ColumnDescriptor _iter29 in this.ColumnFamilies)
                        {
                            _iter29.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("createTable_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",ColumnFamilies: ");
                sb.Append(this.ColumnFamilies);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columnFamilies;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: createTable_result

        [Serializable]
        public class createTable_result : TBase
        {
            public Isset __isset;
            private AlreadyExists _exist;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            public AlreadyExists Exist
            {
                get { return this._exist; }
                set
                {
                    this.__isset.exist = true;
                    this._exist = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                this.Exist = new AlreadyExists();
                                this.Exist.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("createTable_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.exist)
                {
                    if (this.Exist != null)
                    {
                        field.Name = "Exist";
                        field.Type = TType.Struct;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        this.Exist.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("createTable_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(",Exist: ");
                sb.Append(this.Exist == null ? "<null>" : this.Exist.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool exist;
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllRowTs_args

        [Serializable]
        public class deleteAllRowTs_args : TBase
        {
            public Isset __isset;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllRowTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllRowTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllRowTs_result

        [Serializable]
        public class deleteAllRowTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllRowTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllRowTs_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllRow_args

        [Serializable]
        public class deleteAllRow_args : TBase
        {
            public Isset __isset;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllRow_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllRow_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllRow_result

        [Serializable]
        public class deleteAllRow_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllRow_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllRow_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllTs_args

        [Serializable]
        public class deleteAllTs_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAllTs_result

        [Serializable]
        public class deleteAllTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAllTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAllTs_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAll_args

        [Serializable]
        public class deleteAll_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAll_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAll_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteAll_result

        [Serializable]
        public class deleteAll_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteAll_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteAll_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteTable_args

        [Serializable]
        public class deleteTable_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteTable_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteTable_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: deleteTable_result

        [Serializable]
        public class deleteTable_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("deleteTable_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("deleteTable_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: disableTable_args

        [Serializable]
        public class disableTable_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("disableTable_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("disableTable_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: disableTable_result

        [Serializable]
        public class disableTable_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("disableTable_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("disableTable_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: enableTable_args

        [Serializable]
        public class enableTable_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("enableTable_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("enableTable_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: enableTable_result

        [Serializable]
        public class enableTable_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("enableTable_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("enableTable_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: getColumnDescriptors_args

        [Serializable]
        public class getColumnDescriptors_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getColumnDescriptors_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getColumnDescriptors_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getColumnDescriptors_result

        [Serializable]
        public class getColumnDescriptors_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private Dictionary<byte[], ColumnDescriptor> _success;

            public Dictionary<byte[], ColumnDescriptor> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Map)
                            {
                                {
                                    this.Success = new Dictionary<byte[], ColumnDescriptor>();
                                    TMap _map17 = iprot.ReadMapBegin();
                                    for (int _i18 = 0; _i18 < _map17.Count; ++_i18)
                                    {
                                        byte[] _key19;
                                        ColumnDescriptor _val20;
                                        _key19 = iprot.ReadBinary();
                                        _val20 = new ColumnDescriptor();
                                        _val20.Read(iprot);
                                        this.Success[_key19] = _val20;
                                    }
                                    iprot.ReadMapEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getColumnDescriptors_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Map;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, this.Success.Count));
                            foreach (var _iter21 in this.Success.Keys)
                            {
                                oprot.WriteBinary(_iter21);
                                this.Success[_iter21].Write(oprot);
                            }
                            oprot.WriteMapEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getColumnDescriptors_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowTs_args

        [Serializable]
        public class getRowTs_args : TBase
        {
            public Isset __isset;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowTs_result

        [Serializable]
        public class getRowTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list54 = iprot.ReadListBegin();
                                    for (int _i55 = 0; _i55 < _list54.Count; ++_i55)
                                    {
                                        var _elem56 = new TRowResult();
                                        _elem56 = new TRowResult();
                                        _elem56.Read(iprot);
                                        this.Success.Add(_elem56);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter57 in this.Success)
                            {
                                _iter57.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowWithColumnsTs_args

        [Serializable]
        public class getRowWithColumnsTs_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list58 = iprot.ReadListBegin();
                                    for (int _i59 = 0; _i59 < _list58.Count; ++_i59)
                                    {
                                        byte[] _elem60 = null;
                                        _elem60 = iprot.ReadBinary();
                                        this.Columns.Add(_elem60);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowWithColumnsTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter61 in this.Columns)
                        {
                            oprot.WriteBinary(_iter61);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowWithColumnsTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowWithColumnsTs_result

        [Serializable]
        public class getRowWithColumnsTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list62 = iprot.ReadListBegin();
                                    for (int _i63 = 0; _i63 < _list62.Count; ++_i63)
                                    {
                                        var _elem64 = new TRowResult();
                                        _elem64 = new TRowResult();
                                        _elem64.Read(iprot);
                                        this.Success.Add(_elem64);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowWithColumnsTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter65 in this.Success)
                            {
                                _iter65.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowWithColumnsTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowWithColumns_args

        [Serializable]
        public class getRowWithColumns_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list46 = iprot.ReadListBegin();
                                    for (int _i47 = 0; _i47 < _list46.Count; ++_i47)
                                    {
                                        byte[] _elem48 = null;
                                        _elem48 = iprot.ReadBinary();
                                        this.Columns.Add(_elem48);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowWithColumns_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter49 in this.Columns)
                        {
                            oprot.WriteBinary(_iter49);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowWithColumns_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowWithColumns_result

        [Serializable]
        public class getRowWithColumns_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list50 = iprot.ReadListBegin();
                                    for (int _i51 = 0; _i51 < _list50.Count; ++_i51)
                                    {
                                        var _elem52 = new TRowResult();
                                        _elem52 = new TRowResult();
                                        _elem52.Read(iprot);
                                        this.Success.Add(_elem52);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowWithColumns_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter53 in this.Success)
                            {
                                _iter53.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowWithColumns_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRow_args

        [Serializable]
        public class getRow_args : TBase
        {
            public Isset __isset;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRow_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRow_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRow_result

        [Serializable]
        public class getRow_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list42 = iprot.ReadListBegin();
                                    for (int _i43 = 0; _i43 < _list42.Count; ++_i43)
                                    {
                                        var _elem44 = new TRowResult();
                                        _elem44 = new TRowResult();
                                        _elem44.Read(iprot);
                                        this.Success.Add(_elem44);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRow_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter45 in this.Success)
                            {
                                _iter45.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRow_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsTs_args

        [Serializable]
        public class getRowsTs_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _rows;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<byte[]> Rows
            {
                get { return this._rows; }
                set
                {
                    this.__isset.rows = true;
                    this._rows = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Rows = new List<byte[]>();
                                    TList _list86 = iprot.ReadListBegin();
                                    for (int _i87 = 0; _i87 < _list86.Count; ++_i87)
                                    {
                                        byte[] _elem88 = null;
                                        _elem88 = iprot.ReadBinary();
                                        this.Rows.Add(_elem88);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Rows != null && this.__isset.rows)
                {
                    field.Name = "rows";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Rows.Count));
                        foreach (var _iter89 in this.Rows)
                        {
                            oprot.WriteBinary(_iter89);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Rows: ");
                sb.Append(this.Rows);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool rows;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsTs_result

        [Serializable]
        public class getRowsTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list90 = iprot.ReadListBegin();
                                    for (int _i91 = 0; _i91 < _list90.Count; ++_i91)
                                    {
                                        var _elem92 = new TRowResult();
                                        _elem92 = new TRowResult();
                                        _elem92.Read(iprot);
                                        this.Success.Add(_elem92);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter93 in this.Success)
                            {
                                _iter93.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsWithColumnsTs_args

        [Serializable]
        public class getRowsWithColumnsTs_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private List<byte[]> _rows;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<byte[]> Rows
            {
                get { return this._rows; }
                set
                {
                    this.__isset.rows = true;
                    this._rows = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Rows = new List<byte[]>();
                                    TList _list94 = iprot.ReadListBegin();
                                    for (int _i95 = 0; _i95 < _list94.Count; ++_i95)
                                    {
                                        byte[] _elem96 = null;
                                        _elem96 = iprot.ReadBinary();
                                        this.Rows.Add(_elem96);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list97 = iprot.ReadListBegin();
                                    for (int _i98 = 0; _i98 < _list97.Count; ++_i98)
                                    {
                                        byte[] _elem99 = null;
                                        _elem99 = iprot.ReadBinary();
                                        this.Columns.Add(_elem99);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsWithColumnsTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Rows != null && this.__isset.rows)
                {
                    field.Name = "rows";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Rows.Count));
                        foreach (var _iter100 in this.Rows)
                        {
                            oprot.WriteBinary(_iter100);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter101 in this.Columns)
                        {
                            oprot.WriteBinary(_iter101);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsWithColumnsTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Rows: ");
                sb.Append(this.Rows);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool rows;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsWithColumnsTs_result

        [Serializable]
        public class getRowsWithColumnsTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list102 = iprot.ReadListBegin();
                                    for (int _i103 = 0; _i103 < _list102.Count; ++_i103)
                                    {
                                        var _elem104 = new TRowResult();
                                        _elem104 = new TRowResult();
                                        _elem104.Read(iprot);
                                        this.Success.Add(_elem104);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsWithColumnsTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter105 in this.Success)
                            {
                                _iter105.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsWithColumnsTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsWithColumns_args

        [Serializable]
        public class getRowsWithColumns_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private List<byte[]> _rows;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<byte[]> Rows
            {
                get { return this._rows; }
                set
                {
                    this.__isset.rows = true;
                    this._rows = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Rows = new List<byte[]>();
                                    TList _list74 = iprot.ReadListBegin();
                                    for (int _i75 = 0; _i75 < _list74.Count; ++_i75)
                                    {
                                        byte[] _elem76 = null;
                                        _elem76 = iprot.ReadBinary();
                                        this.Rows.Add(_elem76);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list77 = iprot.ReadListBegin();
                                    for (int _i78 = 0; _i78 < _list77.Count; ++_i78)
                                    {
                                        byte[] _elem79 = null;
                                        _elem79 = iprot.ReadBinary();
                                        this.Columns.Add(_elem79);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsWithColumns_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Rows != null && this.__isset.rows)
                {
                    field.Name = "rows";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Rows.Count));
                        foreach (var _iter80 in this.Rows)
                        {
                            oprot.WriteBinary(_iter80);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter81 in this.Columns)
                        {
                            oprot.WriteBinary(_iter81);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsWithColumns_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Rows: ");
                sb.Append(this.Rows);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool rows;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRowsWithColumns_result

        [Serializable]
        public class getRowsWithColumns_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list82 = iprot.ReadListBegin();
                                    for (int _i83 = 0; _i83 < _list82.Count; ++_i83)
                                    {
                                        var _elem84 = new TRowResult();
                                        _elem84 = new TRowResult();
                                        _elem84.Read(iprot);
                                        this.Success.Add(_elem84);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRowsWithColumns_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter85 in this.Success)
                            {
                                _iter85.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRowsWithColumns_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRows_args

        [Serializable]
        public class getRows_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _rows;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<byte[]> Rows
            {
                get { return this._rows; }
                set
                {
                    this.__isset.rows = true;
                    this._rows = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Rows = new List<byte[]>();
                                    TList _list66 = iprot.ReadListBegin();
                                    for (int _i67 = 0; _i67 < _list66.Count; ++_i67)
                                    {
                                        byte[] _elem68 = null;
                                        _elem68 = iprot.ReadBinary();
                                        this.Rows.Add(_elem68);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRows_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Rows != null && this.__isset.rows)
                {
                    field.Name = "rows";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Rows.Count));
                        foreach (var _iter69 in this.Rows)
                        {
                            oprot.WriteBinary(_iter69);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRows_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Rows: ");
                sb.Append(this.Rows);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool rows;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getRows_result

        [Serializable]
        public class getRows_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list70 = iprot.ReadListBegin();
                                    for (int _i71 = 0; _i71 < _list70.Count; ++_i71)
                                    {
                                        var _elem72 = new TRowResult();
                                        _elem72 = new TRowResult();
                                        _elem72.Read(iprot);
                                        this.Success.Add(_elem72);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getRows_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter73 in this.Success)
                            {
                                _iter73.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getRows_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getTableNames_args

        [Serializable]
        public class getTableNames_args : TBase
        {
            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getTableNames_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getTableNames_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }

        #endregion

        #region Nested type: getTableNames_result

        [Serializable]
        public class getTableNames_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<byte[]> _success;

            public List<byte[]> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<byte[]>();
                                    TList _list13 = iprot.ReadListBegin();
                                    for (int _i14 = 0; _i14 < _list13.Count; ++_i14)
                                    {
                                        byte[] _elem15 = null;
                                        _elem15 = iprot.ReadBinary();
                                        this.Success.Add(_elem15);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getTableNames_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.String, this.Success.Count));
                            foreach (var _iter16 in this.Success)
                            {
                                oprot.WriteBinary(_iter16);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getTableNames_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getTableRegions_args

        [Serializable]
        public class getTableRegions_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getTableRegions_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getTableRegions_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getTableRegions_result

        [Serializable]
        public class getTableRegions_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TRegionInfo> _success;

            public List<TRegionInfo> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRegionInfo>();
                                    TList _list22 = iprot.ReadListBegin();
                                    for (int _i23 = 0; _i23 < _list22.Count; ++_i23)
                                    {
                                        var _elem24 = new TRegionInfo();
                                        _elem24 = new TRegionInfo();
                                        _elem24.Read(iprot);
                                        this.Success.Add(_elem24);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getTableRegions_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRegionInfo _iter25 in this.Success)
                            {
                                _iter25.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getTableRegions_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getVerTs_args

        [Serializable]
        public class getVerTs_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private int _numVersions;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            public int NumVersions
            {
                get { return this._numVersions; }
                set
                {
                    this.__isset.numVersions = true;
                    this._numVersions = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I32)
                            {
                                this.NumVersions = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getVerTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.numVersions)
                {
                    field.Name = "numVersions";
                    field.Type = TType.I32;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.NumVersions);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getVerTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(",NumVersions: ");
                sb.Append(this.NumVersions);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool numVersions;
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: getVerTs_result

        [Serializable]
        public class getVerTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TCell> _success;

            public List<TCell> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TCell>();
                                    TList _list38 = iprot.ReadListBegin();
                                    for (int _i39 = 0; _i39 < _list38.Count; ++_i39)
                                    {
                                        var _elem40 = new TCell();
                                        _elem40 = new TCell();
                                        _elem40.Read(iprot);
                                        this.Success.Add(_elem40);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getVerTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TCell _iter41 in this.Success)
                            {
                                _iter41.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getVerTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: getVer_args

        [Serializable]
        public class getVer_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private int _numVersions;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            public int NumVersions
            {
                get { return this._numVersions; }
                set
                {
                    this.__isset.numVersions = true;
                    this._numVersions = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I32)
                            {
                                this.NumVersions = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getVer_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.numVersions)
                {
                    field.Name = "numVersions";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.NumVersions);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getVer_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(",NumVersions: ");
                sb.Append(this.NumVersions);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool numVersions;
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: getVer_result

        [Serializable]
        public class getVer_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TCell> _success;

            public List<TCell> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TCell>();
                                    TList _list34 = iprot.ReadListBegin();
                                    for (int _i35 = 0; _i35 < _list34.Count; ++_i35)
                                    {
                                        var _elem36 = new TCell();
                                        _elem36 = new TCell();
                                        _elem36.Read(iprot);
                                        this.Success.Add(_elem36);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("getVer_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TCell _iter37 in this.Success)
                            {
                                _iter37.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("getVer_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: get_args

        [Serializable]
        public class get_args : TBase
        {
            public Isset __isset;
            private byte[] _column;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public byte[] Column
            {
                get { return this._column; }
                set
                {
                    this.__isset.column = true;
                    this._column = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.Column = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("get_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Column != null && this.__isset.column)
                {
                    field.Name = "column";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Column);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("get_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Column: ");
                sb.Append(this.Column);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool column;
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: get_result

        [Serializable]
        public class get_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private List<TCell> _success;

            public List<TCell> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TCell>();
                                    TList _list30 = iprot.ReadListBegin();
                                    for (int _i31 = 0; _i31 < _list30.Count; ++_i31)
                                    {
                                        var _elem32 = new TCell();
                                        _elem32 = new TCell();
                                        _elem32.Read(iprot);
                                        this.Success.Add(_elem32);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("get_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TCell _iter33 in this.Success)
                            {
                                _iter33.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("get_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: isTableEnabled_args

        [Serializable]
        public class isTableEnabled_args : TBase
        {
            public Isset __isset;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("isTableEnabled_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("isTableEnabled_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: isTableEnabled_result

        [Serializable]
        public class isTableEnabled_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private bool _success;

            public bool Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                this.Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("isTableEnabled_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("isTableEnabled_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: majorCompact_args

        [Serializable]
        public class majorCompact_args : TBase
        {
            public Isset __isset;
            private byte[] _tableNameOrRegionName;

            public byte[] TableNameOrRegionName
            {
                get { return this._tableNameOrRegionName; }
                set
                {
                    this.__isset.tableNameOrRegionName = true;
                    this._tableNameOrRegionName = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableNameOrRegionName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("majorCompact_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableNameOrRegionName != null && this.__isset.tableNameOrRegionName)
                {
                    field.Name = "tableNameOrRegionName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableNameOrRegionName);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("majorCompact_args(");
                sb.Append("TableNameOrRegionName: ");
                sb.Append(this.TableNameOrRegionName);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool tableNameOrRegionName;
            }

            #endregion
        }

        #endregion

        #region Nested type: majorCompact_result

        [Serializable]
        public class majorCompact_result : TBase
        {
            public Isset __isset;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("majorCompact_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("majorCompact_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRowTs_args

        [Serializable]
        public class mutateRowTs_args : TBase
        {
            public Isset __isset;
            private List<Mutation> _mutations;
            private byte[] _row;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public List<Mutation> Mutations
            {
                get { return this._mutations; }
                set
                {
                    this.__isset.mutations = true;
                    this._mutations = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Mutations = new List<Mutation>();
                                    TList _list110 = iprot.ReadListBegin();
                                    for (int _i111 = 0; _i111 < _list110.Count; ++_i111)
                                    {
                                        var _elem112 = new Mutation();
                                        _elem112 = new Mutation();
                                        _elem112.Read(iprot);
                                        this.Mutations.Add(_elem112);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRowTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Mutations != null && this.__isset.mutations)
                {
                    field.Name = "mutations";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, this.Mutations.Count));
                        foreach (Mutation _iter113 in this.Mutations)
                        {
                            _iter113.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRowTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Mutations: ");
                sb.Append(this.Mutations);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool mutations;
                public bool row;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRowTs_result

        [Serializable]
        public class mutateRowTs_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRowTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRowTs_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRow_args

        [Serializable]
        public class mutateRow_args : TBase
        {
            public Isset __isset;
            private List<Mutation> _mutations;
            private byte[] _row;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] Row
            {
                get { return this._row; }
                set
                {
                    this.__isset.row = true;
                    this._row = value;
                }
            }

            public List<Mutation> Mutations
            {
                get { return this._mutations; }
                set
                {
                    this.__isset.mutations = true;
                    this._mutations = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.Row = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Mutations = new List<Mutation>();
                                    TList _list106 = iprot.ReadListBegin();
                                    for (int _i107 = 0; _i107 < _list106.Count; ++_i107)
                                    {
                                        var _elem108 = new Mutation();
                                        _elem108 = new Mutation();
                                        _elem108.Read(iprot);
                                        this.Mutations.Add(_elem108);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRow_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Row != null && this.__isset.row)
                {
                    field.Name = "row";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.Row);
                    oprot.WriteFieldEnd();
                }
                if (this.Mutations != null && this.__isset.mutations)
                {
                    field.Name = "mutations";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, this.Mutations.Count));
                        foreach (Mutation _iter109 in this.Mutations)
                        {
                            _iter109.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRow_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Row: ");
                sb.Append(this.Row);
                sb.Append(",Mutations: ");
                sb.Append(this.Mutations);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool mutations;
                public bool row;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRow_result

        [Serializable]
        public class mutateRow_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRow_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRow_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRowsTs_args

        [Serializable]
        public class mutateRowsTs_args : TBase
        {
            public Isset __isset;
            private List<BatchMutation> _rowBatches;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<BatchMutation> RowBatches
            {
                get { return this._rowBatches; }
                set
                {
                    this.__isset.rowBatches = true;
                    this._rowBatches = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.RowBatches = new List<BatchMutation>();
                                    TList _list118 = iprot.ReadListBegin();
                                    for (int _i119 = 0; _i119 < _list118.Count; ++_i119)
                                    {
                                        var _elem120 = new BatchMutation();
                                        _elem120 = new BatchMutation();
                                        _elem120.Read(iprot);
                                        this.RowBatches.Add(_elem120);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRowsTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.RowBatches != null && this.__isset.rowBatches)
                {
                    field.Name = "rowBatches";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, this.RowBatches.Count));
                        foreach (BatchMutation _iter121 in this.RowBatches)
                        {
                            _iter121.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRowsTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",RowBatches: ");
                sb.Append(this.RowBatches);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool rowBatches;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRowsTs_result

        [Serializable]
        public class mutateRowsTs_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRowsTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRowsTs_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRows_args

        [Serializable]
        public class mutateRows_args : TBase
        {
            public Isset __isset;
            private List<BatchMutation> _rowBatches;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public List<BatchMutation> RowBatches
            {
                get { return this._rowBatches; }
                set
                {
                    this.__isset.rowBatches = true;
                    this._rowBatches = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.RowBatches = new List<BatchMutation>();
                                    TList _list114 = iprot.ReadListBegin();
                                    for (int _i115 = 0; _i115 < _list114.Count; ++_i115)
                                    {
                                        var _elem116 = new BatchMutation();
                                        _elem116 = new BatchMutation();
                                        _elem116.Read(iprot);
                                        this.RowBatches.Add(_elem116);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRows_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.RowBatches != null && this.__isset.rowBatches)
                {
                    field.Name = "rowBatches";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Struct, this.RowBatches.Count));
                        foreach (BatchMutation _iter117 in this.RowBatches)
                        {
                            _iter117.Write(oprot);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRows_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",RowBatches: ");
                sb.Append(this.RowBatches);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool rowBatches;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: mutateRows_result

        [Serializable]
        public class mutateRows_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("mutateRows_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("mutateRows_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerClose_args

        [Serializable]
        public class scannerClose_args : TBase
        {
            public Isset __isset;
            private int _id;

            public int Id
            {
                get { return this._id; }
                set
                {
                    this.__isset.id = true;
                    this._id = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                this.Id = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerClose_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.__isset.id)
                {
                    field.Name = "id";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Id);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerClose_args(");
                sb.Append("Id: ");
                sb.Append(this.Id);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool id;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerClose_result

        [Serializable]
        public class scannerClose_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerClose_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerClose_result(");
                sb.Append("Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerGetList_args

        [Serializable]
        public class scannerGetList_args : TBase
        {
            public Isset __isset;
            private int _id;
            private int _nbRows;

            public int Id
            {
                get { return this._id; }
                set
                {
                    this.__isset.id = true;
                    this._id = value;
                }
            }

            public int NbRows
            {
                get { return this._nbRows; }
                set
                {
                    this.__isset.nbRows = true;
                    this._nbRows = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                this.Id = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I32)
                            {
                                this.NbRows = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerGetList_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.__isset.id)
                {
                    field.Name = "id";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Id);
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.nbRows)
                {
                    field.Name = "nbRows";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.NbRows);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerGetList_args(");
                sb.Append("Id: ");
                sb.Append(this.Id);
                sb.Append(",NbRows: ");
                sb.Append(this.NbRows);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool id;
                public bool nbRows;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerGetList_result

        [Serializable]
        public class scannerGetList_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list146 = iprot.ReadListBegin();
                                    for (int _i147 = 0; _i147 < _list146.Count; ++_i147)
                                    {
                                        var _elem148 = new TRowResult();
                                        _elem148 = new TRowResult();
                                        _elem148.Read(iprot);
                                        this.Success.Add(_elem148);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerGetList_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter149 in this.Success)
                            {
                                _iter149.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerGetList_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerGet_args

        [Serializable]
        public class scannerGet_args : TBase
        {
            public Isset __isset;
            private int _id;

            public int Id
            {
                get { return this._id; }
                set
                {
                    this.__isset.id = true;
                    this._id = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                this.Id = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerGet_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.__isset.id)
                {
                    field.Name = "id";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Id);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerGet_args(");
                sb.Append("Id: ");
                sb.Append(this.Id);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool id;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerGet_result

        [Serializable]
        public class scannerGet_result : TBase
        {
            public Isset __isset;
            private IllegalArgument _ia;
            private IOError _io;
            private List<TRowResult> _success;

            public List<TRowResult> Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            public IllegalArgument Ia
            {
                get { return this._ia; }
                set
                {
                    this.__isset.ia = true;
                    this._ia = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Success = new List<TRowResult>();
                                    TList _list142 = iprot.ReadListBegin();
                                    for (int _i143 = 0; _i143 < _list142.Count; ++_i143)
                                    {
                                        var _elem144 = new TRowResult();
                                        _elem144 = new TRowResult();
                                        _elem144.Read(iprot);
                                        this.Success.Add(_elem144);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Ia = new IllegalArgument();
                                this.Ia.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerGet_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    if (this.Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, this.Success.Count));
                            foreach (TRowResult _iter145 in this.Success)
                            {
                                _iter145.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                else if (this.__isset.ia)
                {
                    if (this.Ia != null)
                    {
                        field.Name = "Ia";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        this.Ia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerGet_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(",Ia: ");
                sb.Append(this.Ia == null ? "<null>" : this.Ia.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool ia;
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenTs_args

        [Serializable]
        public class scannerOpenTs_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _startRow;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] StartRow
            {
                get { return this._startRow; }
                set
                {
                    this.__isset.startRow = true;
                    this._startRow = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.StartRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list134 = iprot.ReadListBegin();
                                    for (int _i135 = 0; _i135 < _list134.Count; ++_i135)
                                    {
                                        byte[] _elem136 = null;
                                        _elem136 = iprot.ReadBinary();
                                        this.Columns.Add(_elem136);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.StartRow != null && this.__isset.startRow)
                {
                    field.Name = "startRow";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StartRow);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter137 in this.Columns)
                        {
                            oprot.WriteBinary(_iter137);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",StartRow: ");
                sb.Append(this.StartRow);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool startRow;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenTs_result

        [Serializable]
        public class scannerOpenTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithPrefix_args

        [Serializable]
        public class scannerOpenWithPrefix_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _startAndPrefix;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] StartAndPrefix
            {
                get { return this._startAndPrefix; }
                set
                {
                    this.__isset.startAndPrefix = true;
                    this._startAndPrefix = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.StartAndPrefix = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list130 = iprot.ReadListBegin();
                                    for (int _i131 = 0; _i131 < _list130.Count; ++_i131)
                                    {
                                        byte[] _elem132 = null;
                                        _elem132 = iprot.ReadBinary();
                                        this.Columns.Add(_elem132);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithPrefix_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.StartAndPrefix != null && this.__isset.startAndPrefix)
                {
                    field.Name = "startAndPrefix";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StartAndPrefix);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter133 in this.Columns)
                        {
                            oprot.WriteBinary(_iter133);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithPrefix_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",StartAndPrefix: ");
                sb.Append(this.StartAndPrefix);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool startAndPrefix;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithPrefix_result

        [Serializable]
        public class scannerOpenWithPrefix_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithPrefix_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithPrefix_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithScan_args

        [Serializable]
        public class scannerOpenWithScan_args : TBase
        {
            public Isset __isset;
            private TScan _scan;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public TScan Scan
            {
                get { return this._scan; }
                set
                {
                    this.__isset.scan = true;
                    this._scan = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Struct)
                            {
                                this.Scan = new TScan();
                                this.Scan.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithScan_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.Scan != null && this.__isset.scan)
                {
                    field.Name = "scan";
                    field.Type = TType.Struct;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    this.Scan.Write(oprot);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithScan_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",Scan: ");
                sb.Append(this.Scan == null ? "<null>" : this.Scan.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool scan;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithScan_result

        [Serializable]
        public class scannerOpenWithScan_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithScan_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithScan_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithStopTs_args

        [Serializable]
        public class scannerOpenWithStopTs_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _startRow;
            private byte[] _stopRow;
            private byte[] _tableName;
            private long _timestamp;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] StartRow
            {
                get { return this._startRow; }
                set
                {
                    this.__isset.startRow = true;
                    this._startRow = value;
                }
            }

            public byte[] StopRow
            {
                get { return this._stopRow; }
                set
                {
                    this.__isset.stopRow = true;
                    this._stopRow = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            public long Timestamp
            {
                get { return this._timestamp; }
                set
                {
                    this.__isset.timestamp = true;
                    this._timestamp = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.StartRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.StopRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list138 = iprot.ReadListBegin();
                                    for (int _i139 = 0; _i139 < _list138.Count; ++_i139)
                                    {
                                        byte[] _elem140 = null;
                                        _elem140 = iprot.ReadBinary();
                                        this.Columns.Add(_elem140);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I64)
                            {
                                this.Timestamp = iprot.ReadI64();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithStopTs_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.StartRow != null && this.__isset.startRow)
                {
                    field.Name = "startRow";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StartRow);
                    oprot.WriteFieldEnd();
                }
                if (this.StopRow != null && this.__isset.stopRow)
                {
                    field.Name = "stopRow";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StopRow);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter141 in this.Columns)
                        {
                            oprot.WriteBinary(_iter141);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (this.__isset.timestamp)
                {
                    field.Name = "timestamp";
                    field.Type = TType.I64;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI64(this.Timestamp);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithStopTs_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",StartRow: ");
                sb.Append(this.StartRow);
                sb.Append(",StopRow: ");
                sb.Append(this.StopRow);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(",Timestamp: ");
                sb.Append(this.Timestamp);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool startRow;
                public bool stopRow;
                public bool tableName;
                public bool timestamp;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithStopTs_result

        [Serializable]
        public class scannerOpenWithStopTs_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithStopTs_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithStopTs_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithStop_args

        [Serializable]
        public class scannerOpenWithStop_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _startRow;
            private byte[] _stopRow;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] StartRow
            {
                get { return this._startRow; }
                set
                {
                    this.__isset.startRow = true;
                    this._startRow = value;
                }
            }

            public byte[] StopRow
            {
                get { return this._stopRow; }
                set
                {
                    this.__isset.stopRow = true;
                    this._stopRow = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.StartRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                this.StopRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list126 = iprot.ReadListBegin();
                                    for (int _i127 = 0; _i127 < _list126.Count; ++_i127)
                                    {
                                        byte[] _elem128 = null;
                                        _elem128 = iprot.ReadBinary();
                                        this.Columns.Add(_elem128);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithStop_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.StartRow != null && this.__isset.startRow)
                {
                    field.Name = "startRow";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StartRow);
                    oprot.WriteFieldEnd();
                }
                if (this.StopRow != null && this.__isset.stopRow)
                {
                    field.Name = "stopRow";
                    field.Type = TType.String;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StopRow);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter129 in this.Columns)
                        {
                            oprot.WriteBinary(_iter129);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithStop_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",StartRow: ");
                sb.Append(this.StartRow);
                sb.Append(",StopRow: ");
                sb.Append(this.StopRow);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool startRow;
                public bool stopRow;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpenWithStop_result

        [Serializable]
        public class scannerOpenWithStop_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpenWithStop_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpenWithStop_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpen_args

        [Serializable]
        public class scannerOpen_args : TBase
        {
            public Isset __isset;
            private List<byte[]> _columns;
            private byte[] _startRow;
            private byte[] _tableName;

            public byte[] TableName
            {
                get { return this._tableName; }
                set
                {
                    this.__isset.tableName = true;
                    this._tableName = value;
                }
            }

            public byte[] StartRow
            {
                get { return this._startRow; }
                set
                {
                    this.__isset.startRow = true;
                    this._startRow = value;
                }
            }

            public List<byte[]> Columns
            {
                get { return this._columns; }
                set
                {
                    this.__isset.columns = true;
                    this._columns = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                this.TableName = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                this.StartRow = iprot.ReadBinary();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    this.Columns = new List<byte[]>();
                                    TList _list122 = iprot.ReadListBegin();
                                    for (int _i123 = 0; _i123 < _list122.Count; ++_i123)
                                    {
                                        byte[] _elem124 = null;
                                        _elem124 = iprot.ReadBinary();
                                        this.Columns.Add(_elem124);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpen_args");
                oprot.WriteStructBegin(struc);
                var field = new TField();
                if (this.TableName != null && this.__isset.tableName)
                {
                    field.Name = "tableName";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.TableName);
                    oprot.WriteFieldEnd();
                }
                if (this.StartRow != null && this.__isset.startRow)
                {
                    field.Name = "startRow";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBinary(this.StartRow);
                    oprot.WriteFieldEnd();
                }
                if (this.Columns != null && this.__isset.columns)
                {
                    field.Name = "columns";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, this.Columns.Count));
                        foreach (var _iter125 in this.Columns)
                        {
                            oprot.WriteBinary(_iter125);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpen_args(");
                sb.Append("TableName: ");
                sb.Append(this.TableName);
                sb.Append(",StartRow: ");
                sb.Append(this.StartRow);
                sb.Append(",Columns: ");
                sb.Append(this.Columns);
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool columns;
                public bool startRow;
                public bool tableName;
            }

            #endregion
        }

        #endregion

        #region Nested type: scannerOpen_result

        [Serializable]
        public class scannerOpen_result : TBase
        {
            public Isset __isset;
            private IOError _io;
            private int _success;

            public int Success
            {
                get { return this._success; }
                set
                {
                    this.__isset.success = true;
                    this._success = value;
                }
            }

            public IOError Io
            {
                get { return this._io; }
                set
                {
                    this.__isset.io = true;
                    this._io = value;
                }
            }

            #region TBase Members

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                this.Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                this.Io = new IOError();
                                this.Io.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                var struc = new TStruct("scannerOpen_result");
                oprot.WriteStructBegin(struc);
                var field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(this.Success);
                    oprot.WriteFieldEnd();
                }
                else if (this.__isset.io)
                {
                    if (this.Io != null)
                    {
                        field.Name = "Io";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        this.Io.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            #endregion

            public override string ToString()
            {
                var sb = new StringBuilder("scannerOpen_result(");
                sb.Append("Success: ");
                sb.Append(this.Success);
                sb.Append(",Io: ");
                sb.Append(this.Io == null ? "<null>" : this.Io.ToString());
                sb.Append(")");
                return sb.ToString();
            }

            #region Nested type: Isset

            [Serializable]
            public struct Isset
            {
                public bool io;
                public bool success;
            }

            #endregion
        }

        #endregion
    }
}