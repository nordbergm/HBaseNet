/**
 * Autogenerated by Thrift Compiler (0.7.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Text;
using Thrift.Protocol;

namespace Thrift.HBase
{
    [Serializable]
    public class ColumnDescriptor : TBase
    {
        public Isset __isset;
        private bool _blockCacheEnabled;
        private int _bloomFilterNbHashes;
        private string _bloomFilterType;
        private int _bloomFilterVectorSize;
        private string _compression;
        private bool _inMemory;
        private int _maxVersions;
        private byte[] _name;
        private int _timeToLive;

        public ColumnDescriptor()
        {
            this._maxVersions = 3;
            this._compression = "NONE";
            this._inMemory = false;
            this._bloomFilterType = "NONE";
            this._bloomFilterVectorSize = 0;
            this._bloomFilterNbHashes = 0;
            this._blockCacheEnabled = false;
            this._timeToLive = -1;
        }

        public byte[] Name
        {
            get { return this._name; }
            set
            {
                this.__isset.name = true;
                this._name = value;
            }
        }

        public int MaxVersions
        {
            get { return this._maxVersions; }
            set
            {
                this.__isset.maxVersions = true;
                this._maxVersions = value;
            }
        }

        public string Compression
        {
            get { return this._compression; }
            set
            {
                this.__isset.compression = true;
                this._compression = value;
            }
        }

        public bool InMemory
        {
            get { return this._inMemory; }
            set
            {
                this.__isset.inMemory = true;
                this._inMemory = value;
            }
        }

        public string BloomFilterType
        {
            get { return this._bloomFilterType; }
            set
            {
                this.__isset.bloomFilterType = true;
                this._bloomFilterType = value;
            }
        }

        public int BloomFilterVectorSize
        {
            get { return this._bloomFilterVectorSize; }
            set
            {
                this.__isset.bloomFilterVectorSize = true;
                this._bloomFilterVectorSize = value;
            }
        }

        public int BloomFilterNbHashes
        {
            get { return this._bloomFilterNbHashes; }
            set
            {
                this.__isset.bloomFilterNbHashes = true;
                this._bloomFilterNbHashes = value;
            }
        }

        public bool BlockCacheEnabled
        {
            get { return this._blockCacheEnabled; }
            set
            {
                this.__isset.blockCacheEnabled = true;
                this._blockCacheEnabled = value;
            }
        }

        public int TimeToLive
        {
            get { return this._timeToLive; }
            set
            {
                this.__isset.timeToLive = true;
                this._timeToLive = value;
            }
        }

        #region TBase Members

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            this.Name = iprot.ReadBinary();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.I32)
                        {
                            this.MaxVersions = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.String)
                        {
                            this.Compression = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == TType.Bool)
                        {
                            this.InMemory = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == TType.String)
                        {
                            this.BloomFilterType = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == TType.I32)
                        {
                            this.BloomFilterVectorSize = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == TType.I32)
                        {
                            this.BloomFilterNbHashes = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 8:
                        if (field.Type == TType.Bool)
                        {
                            this.BlockCacheEnabled = iprot.ReadBool();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 9:
                        if (field.Type == TType.I32)
                        {
                            this.TimeToLive = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            var struc = new TStruct("ColumnDescriptor");
            oprot.WriteStructBegin(struc);
            var field = new TField();
            if (this.Name != null && this.__isset.name)
            {
                field.Name = "name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteBinary(this.Name);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.maxVersions)
            {
                field.Name = "maxVersions";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(this.MaxVersions);
                oprot.WriteFieldEnd();
            }
            if (this.Compression != null && this.__isset.compression)
            {
                field.Name = "compression";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(this.Compression);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.inMemory)
            {
                field.Name = "inMemory";
                field.Type = TType.Bool;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(this.InMemory);
                oprot.WriteFieldEnd();
            }
            if (this.BloomFilterType != null && this.__isset.bloomFilterType)
            {
                field.Name = "bloomFilterType";
                field.Type = TType.String;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(this.BloomFilterType);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.bloomFilterVectorSize)
            {
                field.Name = "bloomFilterVectorSize";
                field.Type = TType.I32;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(this.BloomFilterVectorSize);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.bloomFilterNbHashes)
            {
                field.Name = "bloomFilterNbHashes";
                field.Type = TType.I32;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(this.BloomFilterNbHashes);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.blockCacheEnabled)
            {
                field.Name = "blockCacheEnabled";
                field.Type = TType.Bool;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteBool(this.BlockCacheEnabled);
                oprot.WriteFieldEnd();
            }
            if (this.__isset.timeToLive)
            {
                field.Name = "timeToLive";
                field.Type = TType.I32;
                field.ID = 9;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(this.TimeToLive);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        #endregion

        public override string ToString()
        {
            var sb = new StringBuilder("ColumnDescriptor(");
            sb.Append("Name: ");
            sb.Append(this.Name);
            sb.Append(",MaxVersions: ");
            sb.Append(this.MaxVersions);
            sb.Append(",Compression: ");
            sb.Append(this.Compression);
            sb.Append(",InMemory: ");
            sb.Append(this.InMemory);
            sb.Append(",BloomFilterType: ");
            sb.Append(this.BloomFilterType);
            sb.Append(",BloomFilterVectorSize: ");
            sb.Append(this.BloomFilterVectorSize);
            sb.Append(",BloomFilterNbHashes: ");
            sb.Append(this.BloomFilterNbHashes);
            sb.Append(",BlockCacheEnabled: ");
            sb.Append(this.BlockCacheEnabled);
            sb.Append(",TimeToLive: ");
            sb.Append(this.TimeToLive);
            sb.Append(")");
            return sb.ToString();
        }

        #region Nested type: Isset

        [Serializable]
        public struct Isset
        {
            public bool blockCacheEnabled;
            public bool bloomFilterNbHashes;
            public bool bloomFilterType;
            public bool bloomFilterVectorSize;
            public bool compression;
            public bool inMemory;
            public bool maxVersions;
            public bool name;
            public bool timeToLive;
        }

        #endregion
    }
}